////
////  FluentFirebirdDatabase.swift
////  
////
////  Created by Ugo Cottin on 15/03/2021.
////
//
//import Foundation
//import FirebirdNIO
//import FluentSQL
//
//struct FluentFirebirdDatabase {
//	let database: FirebirdDatabase
//	let context: DatabaseContext
//	let configuration: FirebirdDatabaseConfiguration
//	let inTransaction: Bool
//}
//
//extension FluentFirebirdDatabase: Database {
//	public func execute(query: DatabaseQuery, onOutput: @escaping (DatabaseOutput) -> ()) -> EventLoopFuture<Void> {
//		let expression = SQLQueryConverter(delegate: FirebirdSQLConverterDelegate()).convert(query)
//		return self.execute(sql: expression) { _ in }
//	}
//	
//	public func execute(schema: DatabaseSchema) -> EventLoopFuture<Void> {
//		print(schema)
//		return self.eventLoop.makeSucceededVoidFuture()
//	}
//	
//	public func execute(enum: DatabaseEnum) -> EventLoopFuture<Void> {
//		print(`enum`)
//		return self.eventLoop.makeSucceededVoidFuture()
//	}
//	
//	public func transaction<T>(_ closure: @escaping (Database) -> EventLoopFuture<T>) -> EventLoopFuture<T> {
//		guard !self.inTransaction else {
//			return closure(self)
//		}
//		
//		return self.database.withConnection { conn in
//			conn.startTransaction(on: conn).flatMap { transaction in
//				let db = FluentFirebirdDatabase(
//					database: conn,
//					context: self.context,
//					configuration: self.configuration,
//					inTransaction: true)
//				
//				return closure(db).flatMap { result in
//					conn.commitTransaction(transaction).map { _ in
//						result
//					}
//					.flatMapError { error in
//						conn.rollbackTransaction(transaction).flatMapThrowing { _ in
//							throw error
//						}
//					}
//				}
//			}
//		}
//	}
//	
//	public func withConnection<T>(_ closure: @escaping (Database) -> EventLoopFuture<T>) -> EventLoopFuture<T> {
//		self.database.withConnection { connection in
//			closure(FluentFirebirdDatabase(
//						database: self.database,
//						context: self.context,
//						configuration: self.configuration,
//						inTransaction: self.inTransaction))
//		}
//	}
//}
//
//extension FluentFirebirdDatabase: SQLDatabase {
//	var dialect: SQLDialect {
//		FirebirdSQLDialect()
//	}
//	
//	func execute(sql query: SQLExpression, _ onRow: @escaping (SQLRow) -> ()) -> EventLoopFuture<Void> {
//		let (sql, binds) = self.serialize(query)
//		print(sql)
//		print(binds)
//		return self.eventLoop.makeSucceededVoidFuture()
//	}
//	
//	
//}
//
//struct FirebirdSQLDialect: SQLDialect {
//	var name: String { "firebirdSQL" }
//	
//	var identifierQuote: SQLExpression { SQLRaw("") }
//	
//	var autoIncrementClause: SQLExpression { SQLRaw("generated by default as identity") }
//	
//	func bindPlaceholder(at position: Int) -> SQLExpression {
//		SQLRaw("?")
//	}
//	
//	func literalBoolean(_ value: Bool) -> SQLExpression {
//		value ? SQLRaw("1") : SQLRaw("0")
//	}
//	
//	var supportsAutoIncrement: Bool { false }
//	
//	var enumSyntax: SQLEnumSyntax { .unsupported }
//	
//	
//}
